"""
Django settings for reportminer project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv 

# Load environment variables from .env file
load_dotenv()  

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hd$eis5@(s+)2^65-atcekkfvvy4)pf&7u@8$n*e-(99&jp@nc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',


    #custom apps
    'apps.ingestion',
    'apps.query',


    #thirdparty apps
    'rest_framework',
    'django_extensions',  # Useful for development and debugging
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'reportminer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reportminer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#customize DRF behaviour
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Allow all for now (development)
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # Use JSON as default response format
    ],
}

# openAI API key
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
CHAT_MODEL_NAME = os.getenv("CHAT_MODEL_NAME", "gpt-4o")


# Embedding Configuration - COST OPTIMIZED
ENABLE_AUTO_EMBEDDINGS = True
MAX_SEGMENTS_SYNC = 5              # Reduce from 10 to 5
EMBEDDING_MIN_TEXT_LENGTH = 100    # Increase from 50 to 100
EMBEDDING_BATCH_SIZE = 3           # Reduce from 5 to 3
EMBEDDING_REQUEST_TIMEOUT = 30
EMBEDDING_MAX_RETRIES = 2          # Reduce from 3 to 2
MAX_DAILY_EMBEDDING_CALLS = 300    # Reduce from 10000 to 300
SKIP_EMBEDDING_TYPES = ['header', 'footer', 'list_item']  # Add list_item

# Add new cost control settings
EMBEDDING_COST_ALERT = 100         # Alert at 100 calls
MAX_SEGMENTS_PER_DOCUMENT = 50     # Limit segments per document
SKIP_LARGE_DOCUMENTS = True        # Skip documents with too many segments




# ────────────────────────────────────────────────────────────────────────────────
# ChromaDB persistence configuration
# ChromaDB persistence configuration
CHROMA_PERSIST_DIR = os.getenv(
    "CHROMA_PERSIST_DIR",
    str(BASE_DIR / "chroma_data")  # ← Convert Path to string with str()
)
CHROMA_COLLECTION_NAME = os.getenv(
    "CHROMA_COLLECTION_NAME",
    "reportminer"
)

# Celery (background task) configuration
CELERY_BROKER_URL = os.getenv(
    "REDIS_URL",
    "redis://localhost:6379/0"
)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# ────────────────────────────────────────────────────────────────────────────────

poppler_path = r"C:\Program Files\poppler-24.08.0\Library\bin"
if poppler_path not in os.environ.get('PATH', ''):
    os.environ['PATH'] = poppler_path + os.pathsep + os.environ['PATH']



#splitter 
INGESTION_ROW_EMBED_THRESHOLD = 200
INGESTION_ROW_GROUP_SIZE = 50


# ── CSV & EXCEL INGESTION TOGGLES ──────────────────────────────────────────
# When True, load the entire CSV as one chunk. Otherwise split into row-chunks.
CSV_FULL_SHEET_INGESTION: bool = False

# If CSV_FULL_SHEET_INGESTION=False, this many rows per chunk:
CSV_CHUNKSIZE: int = 50_000

# When True, load each Excel sheet as one chunk. Otherwise fall back to row-by-row.
EXCEL_FULL_SHEET_INGESTION: bool = True